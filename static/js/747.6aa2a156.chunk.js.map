{"version":3,"file":"static/js/747.6aa2a156.chunk.js","mappings":"6SAEQA,EAAmBC,CAAAA,SAAAA,aAAAA,WAAAA,yCAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAnBD,eAUFE,E,MAAWC,GAAAA,OAAa,CAC5BC,QARuB,UAAnBJ,EACK,wBAGF,GAKPK,QAAS,MAGXH,EAASI,aAAaC,SAASC,KAAI,SAACC,GAClC,GAAoB,OAAb,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKC,SAAkC,OAAb,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKC,QAC9B,OAAOD,EAAIE,QAIR,IAAMC,EAAU,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,QAAuC,IAA9BC,OAAAA,OAA8B,MAArB,MAAqB,EAAXC,GAAW,YAC/D,OAAOb,EAASU,SAAT,QACLI,IAAKH,EACLC,OAAAA,GACGC,KCSME,EAAQ,IAjCfC,WASJ,aAAe,IAAD,4BARdC,IAAM,EAQQ,KANdC,MAAQ,GAMM,KAIdC,SAAW,WACT,EAAKF,OALO,KAQdG,MAAQ,WACN,EAAKH,IAAM,GATC,KAoBdI,QAAU,WACR,EAAKH,MAAQ,EAAKA,MAAMI,OAAO,CAAEC,KAAM,UApBvCC,EAAAA,EAAAA,IAAmBC,MAWrB,OAVC,+BAND,WACE,OAAOA,KAAKP,MAAMQ,SACnB,gCAcD,8EAEiB,OAFjB,kBAEuBhB,EAAQ,CAAEC,QAAS,WAF1C,OAEIc,KAAKP,MAFT,sDAIIS,QAAQC,MAAM,oBAAd,MAJJ,4DArBIZ,I,mBCGS,SAASa,IACtB,OAAuBC,EAAAA,EAAAA,YAAfC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,IACTC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,KAAmB,kBAAMrB,KAEtCsB,EAAc,WAClBL,KAWF,OARAM,EAAAA,EAAAA,IAAS,WACPH,EAAWI,eAGbC,EAAAA,EAAAA,IAAW,WACTL,EAAWf,YAIX,SAAC,KAAD,UACG,kBACC,4BACE,sDACA,6CAAqBe,EAAWlB,OAC/Bc,GACD,mBAAQU,QAASJ,EAAjB,oBACA,mBAAQI,QAASN,EAAWhB,SAA5B,0BACA,mBAAQsB,QAASN,EAAWd,QAA5B,uBACA,yDAAac,EAAWO,cACxB,wBACGP,EAAWjB,MAAMyB,KAAI,WAAWC,GAAX,IAAGrB,EAAH,EAAGA,KAAH,OACpB,wBAAkBA,GAATqB,SAIb,mBACEH,QAAS,WACPR,EAAS,WAFb,8B,2FCtCH,SAASH,IAA4B,IAAnBe,EAAkB,uDAAH,EACtC,GAA0BC,EAAAA,EAAAA,UAASD,GAAnC,eAAOd,EAAP,KAAcZ,EAAd,KAEMa,GAAMe,EAAAA,EAAAA,cAAY,WACtB5B,GAAS,SAACY,GAAD,OAAWA,EAAQ,OAC3B,IAEGX,GAAQ2B,EAAAA,EAAAA,cAAY,WACxB5B,EAAS0B,KACR,CAACA,IAEJ,MAAO,CAAEd,MAAAA,EAAOC,IAAAA,EAAKZ,MAAAA","sources":["utils/request.js","stores/page1Store.js","pages/page1/index.jsx","pages/page1/useCount.js"],"sourcesContent":["import axios from 'axios';\n\nconst { REACT_APP_MOCK } = process.env;\n\nconst generateBaseUrl = () => {\n  if (REACT_APP_MOCK === 'local') {\n    return 'http://localhost:3000';\n  }\n\n  return '';\n};\n\nconst instance = axios.create({\n  baseURL: generateBaseUrl(),\n  timeout: 5 * 1000,\n});\n\ninstance.interceptors.response.use((res) => {\n  if (res?.status === 200 || res?.status === 304) {\n    return res.data;\n  }\n});\n\nexport const request = ({ channel, method = 'GET', ...args }) => {\n  return instance.request({\n    url: channel,\n    method,\n    ...args,\n  });\n};\n","import { makeAutoObservable } from 'mobx';\nimport { request } from '../utils/request';\n\nclass Store {\n  num = 1;\n\n  users = [];\n\n  get userCount() {\n    return this.users.length;\n  }\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setCount = () => {\n    this.num++;\n  };\n\n  reset = () => {\n    this.num = 1;\n  };\n\n  *getUsers() {\n    try {\n      this.users = yield request({ channel: '/users' });\n    } catch (e) {\n      console.error('fetch users error', e);\n    }\n  }\n\n  addUser = () => {\n    this.users = this.users.concat({ name: 'qin' });\n  };\n}\nexport const store = new Store();\n","import { Observer, useLocalObservable } from 'mobx-react';\nimport { useMount, useUnmount } from 'react-use';\nimport { useCount } from './useCount';\nimport { store } from '../../stores/page1Store';\nimport { useNavigate } from 'react-router';\n\nexport default function Page1() {\n  const { count, add } = useCount();\n  const navigate = useNavigate();\n  const localStore = useLocalObservable(() => store);\n\n  const handleClick = () => {\n    add();\n  };\n\n  useMount(() => {\n    localStore.getUsers();\n  });\n\n  useUnmount(() => {\n    localStore.reset();\n  });\n\n  return (\n    <Observer>\n      {() => (\n        <div>\n          <h2>this is Page1 component!</h2>\n          <p>data from store: {localStore.num}</p>\n          {count}\n          <button onClick={handleClick}>click</button>\n          <button onClick={localStore.setCount}>change name</button>\n          <button onClick={localStore.addUser}>Add user</button>\n          <p>user 总人数：{localStore.userCount}</p>\n          <ul>\n            {localStore.users.map(({ name }, _index) => (\n              <li key={_index}>{name}</li>\n            ))}\n          </ul>\n\n          <button\n            onClick={() => {\n              navigate('/page2');\n            }}\n          >\n            to page2\n          </button>\n        </div>\n      )}\n    </Observer>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nexport function useCount(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const add = useCallback(() => {\n    setCount((count) => count + 1);\n  }, []);\n\n  const reset = useCallback(() => {\n    setCount(initialValue);\n  }, [initialValue]);\n\n  return { count, add, reset };\n}\n"],"names":["REACT_APP_MOCK","process","instance","axios","baseURL","timeout","interceptors","response","use","res","status","data","request","channel","method","args","url","store","Store","num","users","setCount","reset","addUser","concat","name","makeAutoObservable","this","length","console","error","Page1","useCount","count","add","navigate","useNavigate","localStore","useLocalObservable","handleClick","useMount","getUsers","useUnmount","onClick","userCount","map","_index","initialValue","useState","useCallback"],"sourceRoot":""}